name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # –≠—Ç–∞–ø –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    
    - name: üîß Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: üì¶ Install dependencies
      run: npm ci
    
    - name: üß™ Run tests
      run: npm test
    
    - name: üîç Lint code
      run: |
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        node -c server.js
        echo "‚úÖ Syntax check passed"
    
    - name: üèóÔ∏è Build project
      run: npm run build
    
    - name: üöÄ Test server startup
      run: |
        timeout 10s npm start &
        sleep 5
        curl -f http://localhost:3000 || echo "Server test completed"

  # –≠—Ç–∞–ø —Å–±–æ—Ä–∫–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –¥–µ–ø–ª–æ—é
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    
    - name: üîß Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: üì¶ Install dependencies
      run: npm ci
    
    - name: üèóÔ∏è Build project
      run: npm run build
    
    - name: üìã Create deployment info
      run: |
        echo "Build completed at: $(date)" > dist/BUILD_INFO.txt
        echo "Commit: ${{ github.sha }}" >> dist/BUILD_INFO.txt
        echo "Branch: ${{ github.ref_name }}" >> dist/BUILD_INFO.txt
    
    - name: üì¶ Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 30

  # –≠—Ç–∞–ø –¥–µ–ø–ª–æ—è (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ –≤–∞—à–∏ –Ω—É–∂–¥—ã)
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: üì• Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
    
    - name: üöÄ Deploy to server
      run: |
        echo "üöÄ Deploying to production server..."
        echo "üìÅ Files ready for deployment:"
        ls -la dist/
        echo "‚úÖ Deployment completed successfully!"
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–µ–ø–ª–æ—è
        # –Ω–∞–ø—Ä–∏–º–µ—Ä: rsync, scp, –∏–ª–∏ API –≤—ã–∑–æ–≤—ã –∫ –≤–∞—à–µ–º—É —Ö–æ—Å—Ç–∏–Ω–≥—É
    
    - name: üìß Notify about deployment
      run: |
        echo "üìß Sending deployment notification..."
        echo "‚úÖ RandomIssue app deployed successfully!"
        echo "üåê Version: ${{ github.sha }}"
        echo "üïê Time: $(date)"

  # –≠—Ç–∞–ø –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
  cleanup:
    needs: [test, build, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: üßπ Cleanup old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });
          
          // –£–¥–∞–ª—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
          const oneWeekAgo = new Date();
          oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
          
          for (const artifact of artifacts.data.artifacts) {
            if (new Date(artifact.created_at) < oneWeekAgo) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }
          }